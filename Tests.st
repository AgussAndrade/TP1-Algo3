TestCase subclass: #AlgoFixTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Tests'!!AlgoFixTest methodsFor: 'running' stamp: 'tomas 5/12/2020 16:14'!setUp	precision := 0.001! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:24'!test07PresupuestoPinteoresConPincelUtilizanDiferentesPinturasHacenDescuendoDel50PorcientoEnMoCuandoM2EsMayor40EntoncesOfreceElMenorPresupuesto	| algoFix venier presupuesto valorEsperadoConAlba |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo		- Venier requiere '2' manos con pincel y '1' con rodillo	"	algoFix registrarPintorDePincel: 'Pablo' conValorHora: 500.	algoFix registrarPintorDePincel: 'Eugenio' conValorHora: 600.	algoFix registrarPintorDeRodillo: 'Tomas' conValorHora: 4000.	venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 150 manosPincel: 2 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 55 conPintura: venier.		"El descuento del %50 lo hacen los pintores con pincel!!"	valorEsperadoConAlba := algoFix  		manoDeObra: 			(55 "M2" * 2 "horas" * 500 "Precio" * 2 "manos" * 0.5) 		masMateriales: 			(55 "M2" * 4 "litros" * 150 "Precio" * 2 "manos").	self assert: 'Pablo' equals: (presupuesto responsable).	self assert: valorEsperadoConAlba closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:20'!test03PresupuestoPintorUtilizaRodilloConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo	"	algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 200.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix  		manoDeObra: 			(5 "M2" * 1 "horas" * 200 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 200 "Precio" * 1 "manos").	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:23'!test05PresupuestoPinteoresConPincelRodilloOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo	"	algoFix registrarPintorDePincel: 'Pablo' conValorHora: 500.	algoFix registrarPintorDeRodillo: 'Edson' conValorHora: 800.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 340 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 20 conPintura: alba.	valorEsperado := algoFix 		manoDeObra: 			(20 "M2" * 2 "horas" * 500 "Precio" * 1 "manos") 		masMateriales: 			(20 "M2" * 4 "litros" * 340 "Precio" * 1 "manos").	self assert: 'Pablo' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:20'!test01PresupuestoPintorUtilizaPincelConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba  presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda 2 horas en pintar un M2 (metro cuadrado), 	"	"Consumo de material:		- Para pincel cada M2 lleva 4 litros de pintura	"	"Pinturas:		- Alba   requiere '1' mano con pincel y '1' mano con rodillo	"	algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 2 "horas" * 500 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 4 "litros" * 200 "Precio" * 1 "manos").	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:23'!test08PresupuestoConTecnicaPincel	| algoFix alba venier presupuesto valorEsperadoConAlba valorEsperadoConVenier |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo		- Venier requiere '2' manos con pincel y '1' con rodillo	"	algoFix registrarPintorDePincel: 'Edson' conValorHora: 500.	algoFix registrarPintorDeRodillo: 'Edson' conValorHora: 200.	algoFix registrarPintorDeRodillo: 'Pablo' conValorHora: 800.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 150 manosPincel: 2 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperadoConAlba := algoFix 		manoDeObra: 			(5 "M2" * 1 "horas" * 200 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 200 "Precio" * 1 "manos").	self assert: 'Edson' equals: (presupuesto responsable).	self assert: valorEsperadoConAlba closeTo: (presupuesto valor) precision: precision.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: venier.	valorEsperadoConVenier := algoFix 		manoDeObra: 			(5 "M2" * 1 "horas" * 200 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 150 "Precio" * 1 "manos").	self assert: 'Edson' equals: (presupuesto responsable).	self assert: valorEsperadoConVenier closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:20'!test02PresupuestoPintoresUtilizandoPincelConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura	"		"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo	"	algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.	algoFix registrarPintorDePincel: 'Eugenio' conValorHora: 450.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 150 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 10 conPintura: alba.	valorEsperado := algoFix  		manoDeObra: 			(10 "M2" * 2 "horas" * 450 "Precio" * 1 "manos") 		masMateriales: 			(10 "M2" * 4 "litros" * 150 "Precio" * 1 "manos").	self assert: 'Eugenio' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:21'!test06PresupuestoPinteoresConPincelUtilizanDiferentesPinturasOfreceElMenorPresupuesto	| algoFix venier presupuesto valorEsperadoConVenier |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo		- Venier requiere '2' manos con pincel y '1' con rodillo	"	algoFix registrarPintorDePincel: 'Martin' conValorHora: 500.	algoFix registrarPintorDePincel: 'Sebastian' conValorHora: 600.	venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 150 manosPincel: 2 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 15 conPintura: venier.		valorEsperadoConVenier := algoFix 		manoDeObra: 			(15 "M2" * 2 "horas" * 500 "Precio" * 2 "manos") 		masMateriales: 			(15 "M2" * 4 "litros" * 150 "Precio" * 2 "manos").	self assert: 'Martin' equals: (presupuesto responsable).	self assert: valorEsperadoConVenier closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:20'!test04PresupuestoPintoresUtilizandoRodilloConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo	"	algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 200.	algoFix registrarPintorDeRodillo: 'Eugenio' conValorHora: 130.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 20 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix 		manoDeObra: 			(5 "M2" * 1 "horas" * 130 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 20 "Precio" * 1 "manos").	self assert: 'Eugenio' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !TestCase subclass: #AlgoFixTestAlumno	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Andra 5/22/2020 23:19'!test08AlRegistrar2PintoresDeMismaEspecialidadYNombreSeQuedaConElMasBarato	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Agustin' conValorHora: 500.	algoFix registrarPintorDePincel: 'Agustin' conValorHora: 50.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 150 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 45 conPintura: alba.	valorEsperado := algoFix  manoDeObra: (45 * 2 * 50  * 1 *0.5) masMateriales: (45 * 4 * 150  * 1).	self assert: 'Agustin' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor).! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Andra 5/19/2020 17:40'!test07AlRegistrar2PintoresDelmismoSueldoYProfecionSeQuedaConElPrimeroRegistrado	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Agustin' conValorHora: 50.	algoFix registrarPintorDePincel: 'Agustina' conValorHora: 50.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 150 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 45 conPintura: alba.	valorEsperado := algoFix  manoDeObra: (45 * 2 * 50  * 1 *0.5) masMateriales: (45 * 4 * 150  * 1).	self assert: 'Agustin' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor).! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Andra 5/18/2020 17:34'!test06PresupuestoPintoresUtilizandoPincelYRodilloConPinturaAlbaOfreceElMenorPresupuestoConDescuento	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	algoFix registrarPintorDeRodillo: 'Agustin' conValorHora: 100.	algoFix registrarPintorDePincel: 'Agustina' conValorHora: 50.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 150 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 45 conPintura: alba.	valorEsperado := algoFix  manoDeObra: (45 * 2 * 50  * 1 *0.5) masMateriales: (45 * 4 * 150  * 1).	self assert: 'Agustina' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor).! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Andra 5/18/2020 17:35'!test03PresupuestoPintoresUtilizandoRodilloConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	algoFix registrarPintorDeRodillo: 'Agustin' conValorHora: 100.	algoFix registrarPintorDeRodillo: 'Jose' conValorHora: 50.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 150 manosPincel: 1 manosRodillo: 2.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 10 conPintura: alba.	valorEsperado := algoFix  manoDeObra: (10 * 1 * 50  * 2) masMateriales: (10 * 5 * 150  * 2).	self assert: 'Jose' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor).! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Andra 5/18/2020 17:36'!test05PresupuestoPintoresUtilizandoPincelConPinturaAlbaOfreceElMenorPresupuestoConDescuento	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Agustina' conValorHora: 50.	algoFix registrarPintorDePincel: 'Agustin' conValorHora: 100.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 180 manosPincel: 1 manosRodillo: 2.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 45 conPintura: alba.	valorEsperado := algoFix  manoDeObra: (45 * 2 * 50  * 1 *0.5) masMateriales: (45 * 4 * 180  * 1).	self assert: 'Agustina' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor).! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Andra 5/18/2020 17:18'!test02PresupuestoPintoresUtilizandoPincelConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Agustin' conValorHora: 100.	algoFix registrarPintorDePincel: 'Agustina' conValorHora: 50.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 150 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 10 conPintura: alba.	valorEsperado := algoFix  manoDeObra: (10 * 2 * 50  * 1) masMateriales: (10 * 4 * 150  * 1).	self assert: 'Agustina' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor).! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Andra 5/18/2020 17:07'!test01PresupuestoPintorDebeTirarErrorDeRegistroSiNoHayPintoresRegistrados	| algoFix alba |	algoFix := AlgoFix new.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	self should: [ algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba ] raise: PintorNoRegistradoError.! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Andra 5/18/2020 17:36'!test04PresupuestoPintoresUtilizandoRodilloYPincelConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Agustin' conValorHora: 100.	algoFix registrarPintorDeRodillo: 'Mario' conValorHora: 50.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 150 manosPincel: 1 manosRodillo: 2.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 10 conPintura: alba.	valorEsperado := algoFix  manoDeObra: (10 * 2 * 100  * 1) masMateriales: (10 * 4 * 150  * 1).	self assert: 'Agustin' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor).! !TestCase subclass: #CarpetaConDatosTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!CarpetaConDatosTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 15:37'!test05CreoUnaCarpetaDebeDarmeSuMejorPresupuestoEntre2Pintores	|carpeta pintura presupuesto|	pintura := Pintura crear: 'Hola' conPrecioPorLitro: 10 manosPincel: 3 manosRodillo: 2 .	carpeta := CarpetaConPintores crearCon:(Pintor conNombre: 'miguel' cobra: 200 yTecnica: (RubroPincel new )). 	carpeta registrar:(Pintor conNombre: 'Robertito' cobra: 500 yTecnica: (RubroRodillo new )). 	presupuesto := 	carpeta presupuestoMasBaratoParaPintarMetrosCuadrados: 46 conPintura: pintura.	self assert: 'miguel' equals: (presupuesto responsable).	self assert: 33120 closeTo: (presupuesto valor).! !!CarpetaConDatosTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 15:38'!test06CreoUnaCarpetaDebeDarmeSuMejorPresupuestoEntre2PintoresPeroElMejorEsOtro	|carpeta pintura presupuesto|	pintura := Pintura crear: 'Hola' conPrecioPorLitro: 10 manosPincel: 3 manosRodillo: 2 .	carpeta := CarpetaConPintores crearCon:(Pintor conNombre: 'miguel' cobra: 200 yTecnica: (RubroPincel new )). 	carpeta registrar:(Pintor conNombre: 'miguelcito' cobra: 20 yTecnica: (RubroRodillo new )). 	presupuesto := 	carpeta presupuestoMasBaratoParaPintarMetrosCuadrados: 46 conPintura: pintura.	self assert: 'miguelcito' equals: (presupuesto responsable).	self assert: 6440 closeTo: (presupuesto valor).! !!CarpetaConDatosTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 15:34'!test04CreoUnaCarpetaDebeDarmeSuMejorPresupuesto	|carpeta pintura presupuesto|	pintura := Pintura crear: 'Hola' conPrecioPorLitro: 10 manosPincel: 3 manosRodillo: 2 .	carpeta := CarpetaConPintores crearCon:(Pintor conNombre: 'miguel' cobra: 200 yTecnica: (RubroPincel new )). 	presupuesto := 	carpeta presupuestoMasBaratoParaPintarMetrosCuadrados: 46 conPintura: pintura.	self assert: 'miguel' equals: (presupuesto responsable).	self assert: 33120 closeTo: (presupuesto valor).! !!CarpetaConDatosTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 15:21'!test02CreoUnaCarpetaYRegistroUnPintorDeRodillo	|carpeta |	carpeta := CarpetaConPintores crearCon:(Pintor conNombre: 'miguel' cobra: 200 yTecnica: (RubroRodillo new )). ! !!CarpetaConDatosTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 15:25'!test03CreoUnaCarpetaDebeDarmeSuMejorPresupuesto	|carpeta pintura presupuesto|	pintura := Pintura crear: 'Hola' conPrecioPorLitro: 10 manosPincel: 3 manosRodillo: 2 .	carpeta := CarpetaConPintores crearCon:(Pintor conNombre: 'miguel' cobra: 200 yTecnica: (RubroRodillo new )). 	presupuesto := 	carpeta presupuestoMasBaratoParaPintarMetrosCuadrados: 46 conPintura: pintura.	self assert: 'miguel' equals: (presupuesto responsable).	self assert: 23000 closeTo: (presupuesto valor).! !!CarpetaConDatosTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 15:21'!test01CreoUnaCarpetaYRegistroUnPintorDePincel	|carpeta |	carpeta := CarpetaConPintores crearCon:(Pintor conNombre: 'miguel' cobra: 200 yTecnica: (RubroPincel new )). ! !TestCase subclass: #CarpetaVaciaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!CarpetaVaciaTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 15:41'!test03CreoOtraCarpetaVaciaYRegistroUnPintorDePincelDebeDarmeSuMejor |carpeta pintura presupuesto|pintura := Pintura crear: 'truchin' conPrecioPorLitro: 4 manosPincel: 52 manosRodillo: 41.carpeta := CarpetaVacia new.self should: [ carpeta presupuestoMasBaratoParaPintarMetrosCuadrados: 10 conPintura: pintura ] raise:  PintorNoRegistradoError.carpeta:= carpeta registrar: (Pintor conNombre: 'peito' cobra: 2 yTecnica:RubroPincel new).presupuesto := carpeta presupuestoMasBaratoParaPintarMetrosCuadrados: 2 conPintura: pintura.self assert: 'peito' equals: presupuesto responsable .self assert: 2080 closeTo: presupuesto valor.! !!CarpetaVaciaTest methodsFor: 'tests' stamp: 'Andra 5/21/2020 15:36'!test01CarpetaVaciaDebeDevolverALaHoraDeHacerElPresupuestoUnError|carpeta pintura|pintura := Pintura crear: 'truchin' conPrecioPorLitro: 4 manosPincel: 52 manosRodillo: 41.carpeta := CarpetaVacia new.self should: [ carpeta presupuestoMasBaratoParaPintarMetrosCuadrados: 10 conPintura: pintura ] raise:  PintorNoRegistradoError.! !!CarpetaVaciaTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 15:40'!test02CreoUnaCarpetaVaciaYRegistroUnPintorDePincelDebeDarmeSuMejor |carpeta pintura presupuesto|pintura := Pintura crear: 'truchin' conPrecioPorLitro: 4 manosPincel: 52 manosRodillo: 41.carpeta := CarpetaVacia new.self should: [ carpeta presupuestoMasBaratoParaPintarMetrosCuadrados: 10 conPintura: pintura ] raise:  PintorNoRegistradoError.carpeta:= carpeta registrar: (Pintor conNombre: 'pepito' cobra: 42 yTecnica:RubroPincel new).presupuesto := carpeta presupuestoMasBaratoParaPintarMetrosCuadrados: 4 conPintura: pintura.self assert: 'pepito' equals: presupuesto responsable .self assert: 20800 closeTo: presupuesto valor.! !TestCase subclass: #DescuentoTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!DescuentoTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 16:57'!test02DescuentoDebePoderSaberCuandoAplicarse|descuento presupuesto|descuento := Descuento new.presupuesto := 500.self assert: (presupuesto * 0.5) equals: (descuento aplicarPara: 100 con: presupuesto)! !!DescuentoTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 16:56'!test01DescuentoDebePoderSaberCuandoAplicarse|descuento presupuesto|descuento := Descuento new.presupuesto := 500.self assert: presupuesto equals: (descuento aplicarPara: 10 con: presupuesto)! !TestCase subclass: #PintorTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PintorTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 16:15'!test10SeteoUnPintorARodilloDebeSabercalcularPresupuestos|pintor alba|alba := Pintura crear: 'Alba' conPrecioPorLitro: 150 manosPincel: 1 manosRodillo: 1.pintor:= Pintor conNombre: 'holadasad' cobra: 20 yTecnica: RubroRodillo new .self assert: 30800 equals:( pintor calcularPresupuestoDe: 40 Con: alba  ).! !!PintorTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 16:15'!test11SeteoUnPintorARodilloDebeSabercalcularPresupuestos|pintor alba|alba := Pintura crear: 'Alba' conPrecioPorLitro: 150 manosPincel: 1 manosRodillo: 1.pintor:= Pintor conNombre: 'holadasad' cobra: 20 yTecnica: RubroRodillo new .self assert: 3080 equals:( pintor calcularPresupuestoDe: 4 Con: alba  ).! !!PintorTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 16:01'!test02SeteoUnPintorARodillo|pintor |pintor:= Pintor conNombre: 'hola' cobra: 20 yTecnica: RubroRodillo new .! !!PintorTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 16:03'!test06SeteoUnPintorARodilloDebeSaberSuOtroNombre|pintor |pintor:= Pintor conNombre: 'holadasad' cobra: 20 yTecnica: RubroRodillo new .self assert: 'holadasad' equals: pintor responsable.! !!PintorTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 16:03'!test04SeteoUnPintorAPincelDebeSaberSuNombre|pintor |pintor:= Pintor conNombre: 'hola' cobra: 20 yTecnica: RubroPincel new .self assert: 'hola' equals: pintor responsable.! !!PintorTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 16:12'!test08SeteoUnPintorAPincelDebeSabercalcularPresupuestoConDescuento|pintor alba|alba := Pintura crear: 'Alba' conPrecioPorLitro: 150 manosPincel: 1 manosRodillo: 1.pintor:= Pintor conNombre: 'holadasad' cobra: 20 yTecnica: RubroPincel new .self assert: 25420 equals:( pintor calcularPresupuestoDe: 41 Con: alba  ).! !!PintorTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 16:03'!test05SeteoUnPintorAPincelDebeSaberSuOtroNombre|pintor |pintor:= Pintor conNombre: 'holadasad' cobra: 20 yTecnica: RubroPincel new .self assert: 'holadasad' equals: pintor responsable.! !!PintorTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 16:12'!test09SeteoUnPintorAPincelDebeSabercalcularPresupuestosinDescuentoEnCasoQueMetrosigual40|pintor alba|alba := Pintura crear: 'Alba' conPrecioPorLitro: 150 manosPincel: 1 manosRodillo: 1.pintor:= Pintor conNombre: 'holadasad' cobra: 20 yTecnica: RubroPincel new .self assert: 25600 equals:( pintor calcularPresupuestoDe: 40 Con: alba  ).! !!PintorTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 16:00'!test01SeteoUnPintorAPincel|pintor |pintor:= Pintor conNombre: 'hola' cobra: 20 yTecnica: RubroPincel new .! !!PintorTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 16:12'!test07SeteoUnPintorAPincelDebeSabercalcularPresupuesto|pintor alba|alba := Pintura crear: 'Alba' conPrecioPorLitro: 150 manosPincel: 1 manosRodillo: 1.pintor:= Pintor conNombre: 'holadasad' cobra: 20 yTecnica: RubroPincel new .self assert: 24960 equals:( pintor calcularPresupuestoDe: 39 Con: alba  ).! !!PintorTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 16:02'!test03SeteoUnPintorARodilloDebeSaberSuNombre|pintor |pintor:= Pintor conNombre: 'hola' cobra: 20 yTecnica: RubroRodillo new .self assert: 'hola' equals: pintor responsable.! !TestCase subclass: #PinturaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PinturaTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 15:54'!test05UnaPinturaDebeDevolverBienSusOtrasManosAPincel|pintura|pintura := Pintura crear: 'Alba' conPrecioPorLitro: 200 manosPincel: 3 manosRodillo: 1.self  assert: 3 closeTo:  (pintura manosPincel).! !!PinturaTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 15:54'!test06UnaPinturaDebeDevolverBienSusManosARodillo|pintura|pintura := Pintura crear: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.self  assert: 1 closeTo:  (pintura manosRodillo).! !!PinturaTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 15:53'!test04UnaPinturaDebeDevolverBienSusManosAPincel|pintura|pintura := Pintura crear: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.self  assert: 1 closeTo:  (pintura manosPincel).! !!PinturaTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 15:52'!test01CreoUnaPintura|pintura|pintura := Pintura crear: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.! !!PinturaTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 15:53'!test02UnaPinturaDebeDevolverBienSuPrecio|pintura|pintura := Pintura crear: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.self assert: 200 equals: pintura precio! !!PinturaTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 15:53'!test03UnaPinturaDebeDevolverBienSuOtroPrecio|pintura|pintura := Pintura crear: 'Alba' conPrecioPorLitro: 2000 manosPincel: 1 manosRodillo: 1.self assert: 2000 equals: pintura precio! !!PinturaTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 15:54'!test07UnaPinturaDebeDevolverBienSusOtrasManosARodillo|pintura|pintura := Pintura crear: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 10.self  assert: 10 closeTo:  (pintura manosRodillo).! !!PinturaTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 15:55'!test08UnaPinturaDebeDevolverBienTodo|pintura|pintura := Pintura crear: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.self  assert: 1 closeTo:  (pintura manosPincel).self  assert: 1 closeTo:  (pintura manosRodillo).self assert: 200 equals: pintura precio! !TestCase subclass: #PresupuestoTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PresupuestoTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 17:10'!test02PresupuestoDebeSaberSuNombre|presupuesto|presupuesto := Presupuesto crearConNombre: 'Miguel' conValor: 200.self assert: (presupuesto responsable) equals: 'Miguel'! !!PresupuestoTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 17:11'!test05PresupuestoDebeSaberSuValor|presupuesto|presupuesto := Presupuesto crearConNombre: 'Miguelo' conValor: 2000.self assert: (presupuesto valor) equals: 2000! !!PresupuestoTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 17:10'!test03PresupuestoDebeSaberSuNombre|presupuesto|presupuesto := Presupuesto crearConNombre: 'Miguelo' conValor: 200.self assert: (presupuesto responsable) equals: 'Miguelo'! !!PresupuestoTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 17:11'!test04PresupuestoDebeSaberSuValor|presupuesto|presupuesto := Presupuesto crearConNombre: 'Miguelo' conValor: 200.self assert: (presupuesto valor) equals: 200! !!PresupuestoTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 17:09'!test01SeteoUnPresupuesto|presupuesto|presupuesto := Presupuesto crearConNombre: 'Miguel' conValor: 200 ! !TestCase subclass: #RubroPincelTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!RubroPincelTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 17:21'!test02RubroPincelDebePodesCalcularPresupuesto|alba rubro presupuesto|rubro := RubroPincel new.alba := Pintura crear: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.presupuesto := rubro calcularPresupuestoDe: 24 Con: alba para: 200.self assert: presupuesto equals: 28800! !!RubroPincelTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 17:18'!test01SeteoUnRubroPincel|Rubro|Rubro := RubroPincel new.! !TestCase subclass: #RubroRodilloTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!RubroRodilloTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 17:21'!test01SeteoUnRubroRodillo|Rubro|Rubro := RubroRodillo new.! !!RubroRodilloTest methodsFor: 'tests' stamp: 'Andra 6/19/2020 17:22'!test03RubroRodilloDebePoderCalcularPresupuesto|alba rubro presupuesto|rubro := RubroRodillo new.alba := Pintura crear: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.presupuesto := rubro calcularPresupuestoDe: 24 Con: alba para: 200.self assert: presupuesto equals: 28800! !